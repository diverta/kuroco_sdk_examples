/* tslint:disable */
/* eslint-disable */
/**
 * Picol API
 * Alpha testing of new RCMS API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { InlineObject3ToJSON, InlineObject4ToJSON, } from '../models';
/**
 * no description
 */
export class CommentsApi extends runtime.BaseAPI {
    /**
     *  ## Controller parameters  > **use_module_type** `topics`
     */
    async rcmsApiCommentCreatePost(requestParameters) {
        const rcmsApiCommentCreatePostRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiCommentCreatePost.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiCommentCreatePost({})'
                ].join('\n'));
            }
            if (requestParameters.inlineObject3 === null || requestParameters.inlineObject3 === undefined) {
                throw new runtime.RequiredError('inlineObject3', 'Required parameter requestParameters.inlineObject3 was null or undefined when calling rcmsApiCommentCreatePost.');
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = await this.request({
                path: `/rcms-api/comment/create`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: InlineObject3ToJSON(requestParameters.inlineObject3),
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiCommentCreatePostRaw(requestParameters);
    }
    /**
     *  ## Controller parameters  > **use_module_type** `topics`
     */
    async rcmsApiCommentDeletePost(requestParameters) {
        const rcmsApiCommentDeletePostRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiCommentDeletePost.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiCommentDeletePost({})'
                ].join('\n'));
            }
            if (requestParameters.inlineObject4 === null || requestParameters.inlineObject4 === undefined) {
                throw new runtime.RequiredError('inlineObject4', 'Required parameter requestParameters.inlineObject4 was null or undefined when calling rcmsApiCommentDeletePost.');
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = await this.request({
                path: `/rcms-api/comment/delete`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: InlineObject4ToJSON(requestParameters.inlineObject4),
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiCommentDeletePostRaw(requestParameters);
    }
    /**
     *  ## Controller parameters  > **groupBy** `module_id`  > **groupAs** `array`  > **module_type** `topics`  > **new_order_flg** `1`
     */
    async rcmsApiCommentsGet(requestParameters) {
        const rcmsApiCommentsGetRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiCommentsGet.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiCommentsGet({})'
                ].join('\n'));
            }
            if (requestParameters.moduleId === null || requestParameters.moduleId === undefined) {
                throw new runtime.RequiredError('moduleId', 'Required parameter requestParameters.moduleId was null or undefined when calling rcmsApiCommentsGet.');
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            if (requestParameters.newOrderFlg !== undefined) {
                queryParameters['new_order_flg'] = requestParameters.newOrderFlg;
            }
            if (requestParameters.cnt !== undefined) {
                queryParameters['cnt'] = requestParameters.cnt;
            }
            if (requestParameters.pageID !== undefined) {
                queryParameters['pageID'] = requestParameters.pageID;
            }
            if (requestParameters.moduleId) {
                queryParameters['module_id[]'] = requestParameters.moduleId;
            }
            const headerParameters = {};
            const response = await this.request({
                path: `/rcms-api/comments`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiCommentsGetRaw(requestParameters);
    }
}
//# sourceMappingURL=CommentsApi.js.map