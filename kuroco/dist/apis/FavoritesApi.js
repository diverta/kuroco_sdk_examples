/* tslint:disable */
/* eslint-disable */
/**
 * Picol API
 * Alpha testing of new RCMS API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { InlineObject5ToJSON, InlineObject6ToJSON, } from '../models';
/**
 * no description
 */
export class FavoritesApi extends runtime.BaseAPI {
    /**
     */
    async rcmsApiFavoriteCreatePost(requestParameters) {
        const rcmsApiFavoriteCreatePostRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiFavoriteCreatePost.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiFavoriteCreatePost({})'
                ].join('\n'));
            }
            if (requestParameters.inlineObject5 === null || requestParameters.inlineObject5 === undefined) {
                throw new runtime.RequiredError('inlineObject5', 'Required parameter requestParameters.inlineObject5 was null or undefined when calling rcmsApiFavoriteCreatePost.');
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = await this.request({
                path: `/rcms-api/favorite/create`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: InlineObject5ToJSON(requestParameters.inlineObject5),
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiFavoriteCreatePostRaw(requestParameters);
    }
    /**
     */
    async rcmsApiFavoriteDeletePost(requestParameters) {
        const rcmsApiFavoriteDeletePostRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiFavoriteDeletePost.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiFavoriteDeletePost({})'
                ].join('\n'));
            }
            if (requestParameters.inlineObject6 === null || requestParameters.inlineObject6 === undefined) {
                throw new runtime.RequiredError('inlineObject6', 'Required parameter requestParameters.inlineObject6 was null or undefined when calling rcmsApiFavoriteDeletePost.');
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = await this.request({
                path: `/rcms-api/favorite/delete`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: InlineObject6ToJSON(requestParameters.inlineObject6),
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiFavoriteDeletePostRaw(requestParameters);
    }
    /**
     *  ## Controller parameters  > **groupBy** `module_id`  > **groupAs** `array`  > **module_type** `topics`  > **order** `inst_ymdhi:desc`  > **my_list** `0`
     */
    async rcmsApiFavoritesGet(requestParameters) {
        const rcmsApiFavoritesGetRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiFavoritesGet.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiFavoritesGet({})'
                ].join('\n'));
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            if (requestParameters.cnt !== undefined) {
                queryParameters['cnt'] = requestParameters.cnt;
            }
            if (requestParameters.pageID !== undefined) {
                queryParameters['pageID'] = requestParameters.pageID;
            }
            if (requestParameters.moduleId) {
                queryParameters['module_id[]'] = requestParameters.moduleId;
            }
            if (requestParameters.memberId) {
                queryParameters['member_id[]'] = requestParameters.memberId;
            }
            if (requestParameters.rcmsid) {
                queryParameters['rcmsid[]'] = requestParameters.rcmsid;
            }
            const headerParameters = {};
            const response = await this.request({
                path: `/rcms-api/favorites`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiFavoritesGetRaw(requestParameters);
    }
    /**
     *  ## Controller parameters  > **module_type** `topics`  > **cnt** `10`  > **order** `inst_ymdhi:desc`  > **my_list** `1`
     */
    async rcmsApiFavoritesMylistGet(requestParameters) {
        const rcmsApiFavoritesMylistGetRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiFavoritesMylistGet.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiFavoritesMylistGet({})'
                ].join('\n'));
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            if (requestParameters.cnt !== undefined) {
                queryParameters['cnt'] = requestParameters.cnt;
            }
            if (requestParameters.pageID !== undefined) {
                queryParameters['pageID'] = requestParameters.pageID;
            }
            if (requestParameters.moduleId) {
                queryParameters['module_id[]'] = requestParameters.moduleId;
            }
            if (requestParameters.groupBy !== undefined) {
                queryParameters['groupBy'] = requestParameters.groupBy;
            }
            if (requestParameters.groupAs !== undefined) {
                queryParameters['groupAs'] = requestParameters.groupAs;
            }
            const headerParameters = {};
            const response = await this.request({
                path: `/rcms-api/favorites/mylist`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiFavoritesMylistGetRaw(requestParameters);
    }
}
//# sourceMappingURL=FavoritesApi.js.map