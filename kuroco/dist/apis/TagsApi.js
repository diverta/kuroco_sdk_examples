/* tslint:disable */
/* eslint-disable */
/**
 * Picol API
 * Alpha testing of new RCMS API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { InlineObject8ToJSON, } from '../models';
/**
 * no description
 */
export class TagsApi extends runtime.BaseAPI {
    /**
     */
    async rcmsApiTagCreatePost(requestParameters) {
        const rcmsApiTagCreatePostRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiTagCreatePost.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiTagCreatePost({})'
                ].join('\n'));
            }
            if (requestParameters.inlineObject8 === null || requestParameters.inlineObject8 === undefined) {
                throw new runtime.RequiredError('inlineObject8', 'Required parameter requestParameters.inlineObject8 was null or undefined when calling rcmsApiTagCreatePost.');
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = await this.request({
                path: `/rcms-api/tag/create`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: InlineObject8ToJSON(requestParameters.inlineObject8),
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiTagCreatePostRaw(requestParameters);
    }
    /**
     *  ## Controller parameters  > **groupBy** `category`  > **groupAs** `array`
     */
    async rcmsApiTagsCategoryGroupedGet(requestParameters) {
        const rcmsApiTagsCategoryGroupedGetRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiTagsCategoryGroupedGet.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiTagsCategoryGroupedGet({})'
                ].join('\n'));
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            if (requestParameters.order) {
                queryParameters['order[]'] = requestParameters.order;
            }
            if (requestParameters.pageID !== undefined) {
                queryParameters['pageID'] = requestParameters.pageID;
            }
            if (requestParameters.id) {
                queryParameters['id[]'] = requestParameters.id;
            }
            if (requestParameters.categoryId) {
                queryParameters['category_id[]'] = requestParameters.categoryId;
            }
            const headerParameters = {};
            const response = await this.request({
                path: `/rcms-api/tags/category_grouped`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiTagsCategoryGroupedGetRaw(requestParameters);
    }
    /**
     *  ## Controller parameters  > **groupBy** `module_id`  > **groupAs** `array`
     */
    async rcmsApiTagsGet(requestParameters) {
        const rcmsApiTagsGetRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiTagsGet.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiTagsGet({})'
                ].join('\n'));
            }
            if (requestParameters.moduleId === null || requestParameters.moduleId === undefined) {
                throw new runtime.RequiredError('moduleId', 'Required parameter requestParameters.moduleId was null or undefined when calling rcmsApiTagsGet.');
            }
            if (requestParameters.moduleType === null || requestParameters.moduleType === undefined) {
                throw new runtime.RequiredError('moduleType', 'Required parameter requestParameters.moduleType was null or undefined when calling rcmsApiTagsGet.');
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            if (requestParameters.order) {
                queryParameters['order[]'] = requestParameters.order;
            }
            if (requestParameters.pageID !== undefined) {
                queryParameters['pageID'] = requestParameters.pageID;
            }
            if (requestParameters.id) {
                queryParameters['id[]'] = requestParameters.id;
            }
            if (requestParameters.categoryId) {
                queryParameters['category_id[]'] = requestParameters.categoryId;
            }
            if (requestParameters.moduleId) {
                queryParameters['module_id[]'] = requestParameters.moduleId;
            }
            if (requestParameters.moduleType !== undefined) {
                queryParameters['module_type'] = requestParameters.moduleType;
            }
            const headerParameters = {};
            const response = await this.request({
                path: `/rcms-api/tags`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiTagsGetRaw(requestParameters);
    }
}
//# sourceMappingURL=TagsApi.js.map