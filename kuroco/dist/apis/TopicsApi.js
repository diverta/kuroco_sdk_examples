/* tslint:disable */
/* eslint-disable */
/**
 * Picol API
 * Alpha testing of new RCMS API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { InlineObjectToJSON, InlineObject1ToJSON, } from '../models';
/**
 * no description
 */
export class TopicsApi extends runtime.BaseAPI {
    /**
     *  ## Controller parameters  > **topics_group_id** `1`
     */
    async rcmsApiFeedCreatePost(requestParameters) {
        const rcmsApiFeedCreatePostRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiFeedCreatePost.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiFeedCreatePost({})'
                ].join('\n'));
            }
            if (requestParameters.inlineObject === null || requestParameters.inlineObject === undefined) {
                throw new runtime.RequiredError('inlineObject', 'Required parameter requestParameters.inlineObject was null or undefined when calling rcmsApiFeedCreatePost.');
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = await this.request({
                path: `/rcms-api/feed/create`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: InlineObjectToJSON(requestParameters.inlineObject),
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiFeedCreatePostRaw(requestParameters);
    }
    /**
     */
    async rcmsApiFeedDeleteTopicsIdPost(requestParameters) {
        const rcmsApiFeedDeleteTopicsIdPostRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiFeedDeleteTopicsIdPost.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiFeedDeleteTopicsIdPost({})'
                ].join('\n'));
            }
            if (requestParameters.topicsId === null || requestParameters.topicsId === undefined) {
                throw new runtime.RequiredError('topicsId', 'Required parameter requestParameters.topicsId was null or undefined when calling rcmsApiFeedDeleteTopicsIdPost.');
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            const headerParameters = {};
            const response = await this.request({
                path: `/rcms-api/feed/delete/{topics_id}`.replace(`{${"topics_id"}}`, encodeURIComponent(String(requestParameters.topicsId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiFeedDeleteTopicsIdPostRaw(requestParameters);
    }
    /**
     *  ## Controller parameters  > **topics_group_id** `1`
     */
    async rcmsApiFeedUpdateTopicsIdPost(requestParameters) {
        const rcmsApiFeedUpdateTopicsIdPostRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiFeedUpdateTopicsIdPost.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiFeedUpdateTopicsIdPost({})'
                ].join('\n'));
            }
            if (requestParameters.topicsId === null || requestParameters.topicsId === undefined) {
                throw new runtime.RequiredError('topicsId', 'Required parameter requestParameters.topicsId was null or undefined when calling rcmsApiFeedUpdateTopicsIdPost.');
            }
            if (requestParameters.inlineObject1 === null || requestParameters.inlineObject1 === undefined) {
                throw new runtime.RequiredError('inlineObject1', 'Required parameter requestParameters.inlineObject1 was null or undefined when calling rcmsApiFeedUpdateTopicsIdPost.');
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = await this.request({
                path: `/rcms-api/feed/update/{topics_id}`.replace(`{${"topics_id"}}`, encodeURIComponent(String(requestParameters.topicsId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: InlineObject1ToJSON(requestParameters.inlineObject1),
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiFeedUpdateTopicsIdPostRaw(requestParameters);
    }
    /**
     *  ## Controller parameters  > **topics_group_id** `1`  > **cnt** `9`  > **tag_cond** `AND`  > **tag_search** `1`  > **get_comment_cnt** `1`  > **get_favorite_cnt** `1`  > **add_my_favorite_flg** `1`
     */
    async rcmsApiFeedsGet(requestParameters) {
        const rcmsApiFeedsGetRaw = async (requestParameters) => {
            if (requestParameters === null || requestParameters === undefined) {
                throw new runtime.RequiredError('request parameter was null or undefined', [
                    'request parameter was null or undefined when calling rcmsApiFeedsGet.',
                    'This method requires parameters even if defined parameters are all optional (not required).',
                    'In case of that, please specify empty Object.',
                    'e.g. rcmsApiFeedsGet({})'
                ].join('\n'));
            }
            const queryParameters = {};
            if (requestParameters.outputFormat !== undefined) {
                queryParameters['_output_format'] = requestParameters.outputFormat;
            }
            if (requestParameters.lang !== undefined) {
                queryParameters['_lang'] = requestParameters.lang;
            }
            if (requestParameters.cnt !== undefined) {
                queryParameters['cnt'] = requestParameters.cnt;
            }
            if (requestParameters.pageID !== undefined) {
                queryParameters['pageID'] = requestParameters.pageID;
            }
            if (requestParameters.customSearchId !== undefined) {
                queryParameters['custom_search_id'] = requestParameters.customSearchId;
            }
            if (requestParameters.topicsKeyword !== undefined) {
                queryParameters['topics_keyword'] = requestParameters.topicsKeyword;
            }
            if (requestParameters.topicsKeywordCond !== undefined) {
                queryParameters['topics_keyword_cond'] = requestParameters.topicsKeywordCond;
            }
            if (requestParameters.contentsType) {
                queryParameters['contents_type[]'] = requestParameters.contentsType;
            }
            if (requestParameters.contentsTypeCond !== undefined) {
                queryParameters['contents_type_cond'] = requestParameters.contentsTypeCond;
            }
            if (requestParameters.date !== undefined) {
                queryParameters['date'] = requestParameters.date;
            }
            if (requestParameters.usingSeason !== undefined) {
                queryParameters['using_season'] = requestParameters.usingSeason;
            }
            if (requestParameters.season !== undefined) {
                queryParameters['season'] = requestParameters.season;
            }
            if (requestParameters.extColumnCond !== undefined) {
                queryParameters['ext_column_cond'] = requestParameters.extColumnCond;
            }
            if (requestParameters.excludeTopicsId !== undefined) {
                queryParameters['exclude_topics_id'] = requestParameters.excludeTopicsId;
            }
            if (requestParameters.tagCategoryId !== undefined) {
                queryParameters['tag_category_id'] = requestParameters.tagCategoryId;
            }
            if (requestParameters.tagSearch !== undefined) {
                queryParameters['tag_search'] = requestParameters.tagSearch;
            }
            if (requestParameters.tagId) {
                queryParameters['tag_id[]'] = requestParameters.tagId;
            }
            if (requestParameters.tagCond !== undefined) {
                queryParameters['tag_cond'] = requestParameters.tagCond;
            }
            if (requestParameters.excludeTagId !== undefined) {
                queryParameters['exclude_tag_id'] = requestParameters.excludeTagId;
            }
            if (requestParameters.myFavoriteList !== undefined) {
                queryParameters['my_favorite_list'] = requestParameters.myFavoriteList;
            }
            if (requestParameters.myCommentList !== undefined) {
                queryParameters['my_comment_list'] = requestParameters.myCommentList;
            }
            if (requestParameters.myOwnList !== undefined) {
                queryParameters['my_own_list'] = requestParameters.myOwnList;
            }
            if (requestParameters.order !== undefined) {
                queryParameters['order'] = requestParameters.order;
            }
            if (requestParameters.orderById !== undefined) {
                queryParameters['order_by_id'] = requestParameters.orderById;
            }
            if (requestParameters.id) {
                queryParameters['id[]'] = requestParameters.id;
            }
            const headerParameters = {};
            const response = await this.request({
                path: `/rcms-api/feeds`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        };
        return await rcmsApiFeedsGetRaw(requestParameters);
    }
}
//# sourceMappingURL=TopicsApi.js.map