var Kuroco =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "../.tmp/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../.tmp/core/ApiError.ts":
/*!********************************!*\
  !*** ../.tmp/core/ApiError.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst isSuccess_1 = __webpack_require__(/*! ./isSuccess */ \"../.tmp/core/isSuccess.ts\");\nclass ApiError extends Error {\n    constructor(result, message) {\n        super(message);\n        this.url = result.url;\n        this.status = result.status;\n        this.statusText = result.statusText;\n        this.body = result.body;\n    }\n}\nexports.ApiError = ApiError;\n(function (ApiError) {\n    let Message;\n    (function (Message) {\n        Message[\"BAD_REQUEST\"] = \"Bad Request\";\n        Message[\"UNAUTHORIZED\"] = \"Unauthorized\";\n        Message[\"FORBIDDEN\"] = \"Forbidden\";\n        Message[\"NOT_FOUND\"] = \"Not Found\";\n        Message[\"INTERNAL_SERVER_ERROR\"] = \"Internal Server Error\";\n        Message[\"BAD_GATEWAY\"] = \"Bad Gateway\";\n        Message[\"SERVICE_UNAVAILABLE\"] = \"Service Unavailable\";\n        Message[\"GENERIC_ERROR\"] = \"Generic Error\";\n    })(Message = ApiError.Message || (ApiError.Message = {}));\n})(ApiError = exports.ApiError || (exports.ApiError = {}));\n/**\n * Catch common errors (based on status code).\n * @param result\n */\nfunction catchGenericError(result) {\n    switch (result.status) {\n        case 400:\n            throw new ApiError(result, ApiError.Message.BAD_REQUEST);\n        case 401:\n            throw new ApiError(result, ApiError.Message.UNAUTHORIZED);\n        case 403:\n            throw new ApiError(result, ApiError.Message.FORBIDDEN);\n        case 404:\n            throw new ApiError(result, ApiError.Message.NOT_FOUND);\n        case 500:\n            throw new ApiError(result, ApiError.Message.INTERNAL_SERVER_ERROR);\n        case 502:\n            throw new ApiError(result, ApiError.Message.BAD_GATEWAY);\n        case 503:\n            throw new ApiError(result, ApiError.Message.SERVICE_UNAVAILABLE);\n    }\n    if (!isSuccess_1.isSuccess(result.status)) {\n        throw new ApiError(result, ApiError.Message.GENERIC_ERROR);\n    }\n}\nexports.catchGenericError = catchGenericError;\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/core/ApiError.ts?");

/***/ }),

/***/ "../.tmp/core/Auth.ts":
/*!****************************!*\
  !*** ../.tmp/core/Auth.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst OpenAPI_1 = __webpack_require__(/*! ./OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\nconst ApiError_1 = __webpack_require__(/*! ./ApiError */ \"../.tmp/core/ApiError.ts\");\nconst LocalStorage_1 = __webpack_require__(/*! ./LocalStorage */ \"../.tmp/core/LocalStorage.ts\");\n// @ts-ignore-end\nconst AuthenticationService_1 = __webpack_require__(/*! ../services/AuthenticationService */ \"../.tmp/services/AuthenticationService.ts\");\nexports.SpecialOperations = {\n    login: AuthenticationService_1.AuthenticationService.postAuthenticationServiceRcmsApi1AuthLogin,\n    logout: AuthenticationService_1.AuthenticationService.postAuthenticationServiceRcmsApi1AuthLogout,\n    token: AuthenticationService_1.AuthenticationService.postAuthenticationServiceRcmsApi1AuthToken,\n};\nclass Auth {\n    static login(param) {\n        return __awaiter(this, void 0, void 0, function* () {\n            LocalStorage_1.LocalStorage.deleteAccessToken();\n            LocalStorage_1.LocalStorage.deleteRefreshToken();\n            if (!exports.SpecialOperations.login) {\n                return Promise.resolve();\n            }\n            const res = yield exports.SpecialOperations.login(param);\n            const { grant_token, errors } = res;\n            if (errors && Array.isArray(errors) && errors.length > 0) {\n                return Promise.reject(errors);\n            }\n            yield Auth.createToken({ requestBody: { grant_token } });\n            return res.member_id;\n        });\n    }\n    static logout(param) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield exports.SpecialOperations.logout(param).finally(() => {\n                LocalStorage_1.LocalStorage.deleteAccessToken();\n                LocalStorage_1.LocalStorage.deleteRefreshToken();\n            });\n        });\n    }\n    static createToken(param) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (OpenAPI_1.OpenAPI.SECURITY['Token-Auth']) {\n                const res = yield exports.SpecialOperations.token(param);\n                const { access_token, refresh_token } = res;\n                if (access_token) {\n                    LocalStorage_1.LocalStorage.setAccessToken(access_token);\n                }\n                if (refresh_token) {\n                    LocalStorage_1.LocalStorage.setRefreshToken(refresh_token);\n                }\n                return res;\n            }\n            return Promise.resolve();\n        });\n    }\n    static retryRequest(requestFn, result) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // throws error when refresh_token is empty\n            if (!LocalStorage_1.LocalStorage.getRefreshToken()) {\n                LocalStorage_1.LocalStorage.deleteTokens();\n                yield Auth.onErrorHandler(result);\n                throw new ApiError_1.ApiError(result, ApiError_1.ApiError.Message.UNAUTHORIZED);\n            }\n            // handle on error to get refreshed token\n            yield Auth.createToken({ requestBody: { refresh_token: LocalStorage_1.LocalStorage.getRefreshToken() } }).catch(() => __awaiter(this, void 0, void 0, function* () {\n                LocalStorage_1.LocalStorage.deleteTokens();\n                yield Auth.onErrorHandler(result);\n                throw new ApiError_1.ApiError(result, ApiError_1.ApiError.Message.UNAUTHORIZED);\n            }));\n            // retry with refreshed token\n            result = yield requestFn().catch(() => __awaiter(this, void 0, void 0, function* () {\n                LocalStorage_1.LocalStorage.deleteTokens();\n                yield Auth.onErrorHandler(result);\n                throw new ApiError_1.ApiError(result, ApiError_1.ApiError.Message.UNAUTHORIZED);\n            }));\n            return result;\n        });\n    }\n}\nexports.Auth = Auth;\n(function (Auth) {\n    Auth.onErrorHandler = result => Promise.reject();\n})(Auth = exports.Auth || (exports.Auth = {}));\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/core/Auth.ts?");

/***/ }),

/***/ "../.tmp/core/LocalStorage.ts":
/*!************************************!*\
  !*** ../.tmp/core/LocalStorage.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass LocalStorage {\n    /** get */\n    static getAccessToken() {\n        const token = localStorage.getItem(LocalStorage.TokenKeys.accessToken);\n        return !!token ? token : '';\n    }\n    static getRefreshToken() {\n        const token = localStorage.getItem(LocalStorage.TokenKeys.refreshToken);\n        return !!token ? token : '';\n    }\n    /** set */\n    static setAccessToken(token) {\n        localStorage.setItem(LocalStorage.TokenKeys.accessToken, token);\n    }\n    static setRefreshToken(token) {\n        localStorage.setItem(LocalStorage.TokenKeys.refreshToken, token);\n    }\n    /** delete */\n    static deleteAccessToken() {\n        localStorage.removeItem(LocalStorage.TokenKeys.accessToken);\n    }\n    static deleteRefreshToken() {\n        localStorage.removeItem(LocalStorage.TokenKeys.refreshToken);\n    }\n    static deleteTokens() {\n        localStorage.removeItem(LocalStorage.TokenKeys.accessToken);\n        localStorage.removeItem(LocalStorage.TokenKeys.refreshToken);\n    }\n}\nexports.LocalStorage = LocalStorage;\n(function (LocalStorage) {\n    let TokenKeys;\n    (function (TokenKeys) {\n        TokenKeys[\"accessToken\"] = \"accessToken\";\n        TokenKeys[\"refreshToken\"] = \"refreshToken\";\n    })(TokenKeys = LocalStorage.TokenKeys || (LocalStorage.TokenKeys = {}));\n})(LocalStorage = exports.LocalStorage || (exports.LocalStorage = {}));\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/core/LocalStorage.ts?");

/***/ }),

/***/ "../.tmp/core/OpenAPI.ts":
/*!*******************************!*\
  !*** ../.tmp/core/OpenAPI.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OpenAPI = {\n    SAML_URL: 'https://kuroco-dev.a.kuroco.app/direct/login/saml_login/?spid=1',\n    BASE: 'https://kuroco-dev.a.kuroco.app',\n    VERSION: '1',\n    TOKEN: '',\n    SECURITY: {\n        'Token-Auth': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'X-RCMS-API-ACCESS-TOKEN',\n        },\n    }\n};\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/core/OpenAPI.ts?");

/***/ }),

/***/ "../.tmp/core/getFormData.ts":
/*!***********************************!*\
  !*** ../.tmp/core/getFormData.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Get FormData from object. This method is needed to upload\n * multipart form data to the REST API.\n * @param params Key value based object.\n */\nfunction getFormData(params) {\n    const formData = new FormData();\n    for (const key in params) {\n        if (typeof params[key] !== 'undefined') {\n            const value = params[key];\n            if (value !== undefined && value !== null) {\n                formData.append(key, value);\n            }\n        }\n    }\n    return formData;\n}\nexports.getFormData = getFormData;\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/core/getFormData.ts?");

/***/ }),

/***/ "../.tmp/core/getQueryString.ts":
/*!**************************************!*\
  !*** ../.tmp/core/getQueryString.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Get query string from query parameters object. This method also\n * supports multi-value items by creating a key for each item.\n * @param params Key value based object.\n */\nfunction getQueryString(params) {\n    const qs = [];\n    for (const key in params) {\n        if (typeof params[key] !== 'undefined') {\n            const value = params[key];\n            if (value !== undefined && value !== null) {\n                if (Array.isArray(value)) {\n                    value.forEach(value => {\n                        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n                    });\n                }\n                else {\n                    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n                }\n            }\n        }\n    }\n    if (qs.length > 0) {\n        return `?${qs.join('&')}`;\n    }\n    return '';\n}\nexports.getQueryString = getQueryString;\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/core/getQueryString.ts?");

/***/ }),

/***/ "../.tmp/core/isSuccess.ts":
/*!*********************************!*\
  !*** ../.tmp/core/isSuccess.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Check success response code.\n * @param status Status code\n */\nfunction isSuccess(status) {\n    return status >= 200 && status < 300;\n}\nexports.isSuccess = isSuccess;\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/core/isSuccess.ts?");

/***/ }),

/***/ "../.tmp/core/request.ts":
/*!*******************************!*\
  !*** ../.tmp/core/request.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @ts-ignore-start\nconst OpenAPI_1 = __webpack_require__(/*! ./OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\n// @ts-ignore-end\nconst getFormData_1 = __webpack_require__(/*! ./getFormData */ \"../.tmp/core/getFormData.ts\");\nconst getQueryString_1 = __webpack_require__(/*! ./getQueryString */ \"../.tmp/core/getQueryString.ts\");\nconst requestUsingFetch_1 = __webpack_require__(/*! ./requestUsingFetch */ \"../.tmp/core/requestUsingFetch.ts\");\n/**\n * Create the request.\n * @param options Request method options.\n * @returns Result object (see above)\n */\nfunction request(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Escape path (RFC3986) and create the request URL\n        let path = options.path.replace(/[:]/g, '_');\n        let url = `${OpenAPI_1.OpenAPI.BASE}${path}`;\n        // Create request headers\n        const headers = new Headers(Object.assign(Object.assign({}, options.headers), { Accept: 'application/json', 'content-type': 'application/json' }));\n        // Create request settings\n        const request = {\n            headers,\n            method: options.method,\n            credentials: 'include',\n        };\n        // Add the query parameters (if defined).\n        if (options.query) {\n            url += getQueryString_1.getQueryString(options.query);\n        }\n        // Append formData as body\n        if (options.formData) {\n            request.body = getFormData_1.getFormData(options.formData);\n        }\n        else if (options.body) {\n            // If this is blob data, then pass it directly to the body and set content type.\n            // Otherwise we just convert request data to JSON string (needed for fetch api)\n            if (options.body instanceof Blob) {\n                request.body = options.body;\n                if (options.body.type) {\n                    headers.set('Content-Type', options.body.type);\n                }\n            }\n            else {\n                request.body = JSON.stringify(options.body);\n                headers.set('Content-Type', 'application/json');\n            }\n        }\n        try {\n            return yield requestUsingFetch_1.requestUsingFetch(url, request, options.responseHeader);\n        }\n        catch (error) {\n            return {\n                url,\n                ok: false,\n                status: 0,\n                statusText: '',\n                body: error,\n            };\n        }\n    });\n}\nexports.request = request;\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/core/request.ts?");

/***/ }),

/***/ "../.tmp/core/requestUsingFetch.ts":
/*!*****************************************!*\
  !*** ../.tmp/core/requestUsingFetch.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Try to parse the content for any response status code.\n * We check the \"Content-Type\" header to see if we need to parse the\n * content as json or as plain text.\n * @param response Response object from fetch\n */\nfunction parseBody(response) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const contentType = response.headers.get('Content-Type');\n            if (contentType) {\n                switch (contentType.toLowerCase()) {\n                    case 'application/json':\n                    case 'application/json;charset=utf-8':\n                    case 'application/json; charset=utf-8':\n                        return yield response.json();\n                    default:\n                        return yield response.text();\n                }\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n        return null;\n    });\n}\n/**\n * Fetch the response header (if specified)\n * @param response Response object from fetch\n * @param responseHeader The name of the header to fetch\n */\nfunction parseHeader(response, responseHeader) {\n    if (responseHeader) {\n        const content = response.headers.get(responseHeader);\n        if (typeof content === 'string') {\n            return content;\n        }\n    }\n    return null;\n}\n/**\n * Request content using the new Fetch API. This is the default API that is used and\n * is create for all JSON, XML and text objects. However it is limited to UTF-8.\n * This is a problem for some of the Docs content, since that requires UTF-16!\n * @param url The url to request.\n * @param request The request object, containing method, headers, body, etc.\n * @param responseHeader The header we want to parse.\n */\nfunction requestUsingFetch(url, request, responseHeader) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // Fetch response using fetch API.\n        const response = yield fetch(url, request);\n        // Get content of response header or response body\n        const contentHeader = parseHeader(response, responseHeader);\n        const contentBody = yield parseBody(response);\n        // Create result object.\n        return {\n            url,\n            ok: response.ok,\n            status: response.status,\n            statusText: response.statusText,\n            body: contentHeader || contentBody,\n        };\n    });\n}\nexports.requestUsingFetch = requestUsingFetch;\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/core/requestUsingFetch.ts?");

/***/ }),

/***/ "../.tmp/index.ts":
/*!************************!*\
  !*** ../.tmp/index.ts ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ApiError_1 = __webpack_require__(/*! ./core/ApiError */ \"../.tmp/core/ApiError.ts\");\nexports.ApiError = ApiError_1.ApiError;\nvar isSuccess_1 = __webpack_require__(/*! ./core/isSuccess */ \"../.tmp/core/isSuccess.ts\");\nexports.isSuccess = isSuccess_1.isSuccess;\nvar OpenAPI_1 = __webpack_require__(/*! ./core/OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\nexports.OpenAPI = OpenAPI_1.OpenAPI;\nvar Auth_1 = __webpack_require__(/*! ./core/Auth */ \"../.tmp/core/Auth.ts\");\nexports.Auth = Auth_1.Auth;\nvar ApiService_1 = __webpack_require__(/*! ./services/ApiService */ \"../.tmp/services/ApiService.ts\");\nexports.ApiService = ApiService_1.ApiService;\nvar AsynchronousProcessingService_1 = __webpack_require__(/*! ./services/AsynchronousProcessingService */ \"../.tmp/services/AsynchronousProcessingService.ts\");\nexports.AsynchronousProcessingService = AsynchronousProcessingService_1.AsynchronousProcessingService;\nvar AuthenticationService_1 = __webpack_require__(/*! ./services/AuthenticationService */ \"../.tmp/services/AuthenticationService.ts\");\nexports.AuthenticationService = AuthenticationService_1.AuthenticationService;\nvar CommentsService_1 = __webpack_require__(/*! ./services/CommentsService */ \"../.tmp/services/CommentsService.ts\");\nexports.CommentsService = CommentsService_1.CommentsService;\nvar FavoritesService_1 = __webpack_require__(/*! ./services/FavoritesService */ \"../.tmp/services/FavoritesService.ts\");\nexports.FavoritesService = FavoritesService_1.FavoritesService;\nvar FilesService_1 = __webpack_require__(/*! ./services/FilesService */ \"../.tmp/services/FilesService.ts\");\nexports.FilesService = FilesService_1.FilesService;\nvar InquiriesService_1 = __webpack_require__(/*! ./services/InquiriesService */ \"../.tmp/services/InquiriesService.ts\");\nexports.InquiriesService = InquiriesService_1.InquiriesService;\nvar MembersService_1 = __webpack_require__(/*! ./services/MembersService */ \"../.tmp/services/MembersService.ts\");\nexports.MembersService = MembersService_1.MembersService;\nvar TablesService_1 = __webpack_require__(/*! ./services/TablesService */ \"../.tmp/services/TablesService.ts\");\nexports.TablesService = TablesService_1.TablesService;\nvar TagsService_1 = __webpack_require__(/*! ./services/TagsService */ \"../.tmp/services/TagsService.ts\");\nexports.TagsService = TagsService_1.TagsService;\nvar TopicsService_1 = __webpack_require__(/*! ./services/TopicsService */ \"../.tmp/services/TopicsService.ts\");\nexports.TopicsService = TopicsService_1.TopicsService;\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/index.ts?");

/***/ }),

/***/ "../.tmp/services/ApiService.ts":
/*!**************************************!*\
  !*** ../.tmp/services/ApiService.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ApiError_1 = __webpack_require__(/*! ../core/ApiError */ \"../.tmp/core/ApiError.ts\");\nconst request_1 = __webpack_require__(/*! ../core/request */ \"../.tmp/core/request.ts\");\nconst OpenAPI_1 = __webpack_require__(/*! ../core/OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\nconst LocalStorage_1 = __webpack_require__(/*! ../core/LocalStorage */ \"../.tmp/core/LocalStorage.ts\");\nclass ApiService {\n    /**\n     *\n     * ### **Api::list (v1)**\n     *\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static getApiServiceRcmsApi1Apis(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/apis`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Api::openapi_data (v1)**\n     *\n     *\n     * @param apiId API ID\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static getApiServiceRcmsApi1Openapi(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/openapi`,\n                    query: {\n                        'api_id': requestParam.apiId,\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Api::request_api (v1)**\n     *\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static getApiServiceRcmsApi1Request(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/request`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n}\nexports.ApiService = ApiService;\n(function (ApiService) {\n    ;\n    ;\n    ;\n})(ApiService = exports.ApiService || (exports.ApiService = {}));\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/services/ApiService.ts?");

/***/ }),

/***/ "../.tmp/services/AsynchronousProcessingService.ts":
/*!*********************************************************!*\
  !*** ../.tmp/services/AsynchronousProcessingService.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ApiError_1 = __webpack_require__(/*! ../core/ApiError */ \"../.tmp/core/ApiError.ts\");\nconst request_1 = __webpack_require__(/*! ../core/request */ \"../.tmp/core/request.ts\");\nconst OpenAPI_1 = __webpack_require__(/*! ../core/OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\nconst LocalStorage_1 = __webpack_require__(/*! ../core/LocalStorage */ \"../.tmp/core/LocalStorage.ts\");\nclass AsynchronousProcessingService {\n    /**\n     *\n     * ### **Batch::kickbat (v1)**\n     *\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postAsynchronousProcessingServiceRcmsApi1Batch(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/batch`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n}\nexports.AsynchronousProcessingService = AsynchronousProcessingService;\n(function (AsynchronousProcessingService) {\n    ;\n})(AsynchronousProcessingService = exports.AsynchronousProcessingService || (exports.AsynchronousProcessingService = {}));\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/services/AsynchronousProcessingService.ts?");

/***/ }),

/***/ "../.tmp/services/AuthenticationService.ts":
/*!*************************************************!*\
  !*** ../.tmp/services/AuthenticationService.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ApiError_1 = __webpack_require__(/*! ../core/ApiError */ \"../.tmp/core/ApiError.ts\");\nconst request_1 = __webpack_require__(/*! ../core/request */ \"../.tmp/core/request.ts\");\nconst OpenAPI_1 = __webpack_require__(/*! ../core/OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\nconst LocalStorage_1 = __webpack_require__(/*! ../core/LocalStorage */ \"../.tmp/core/LocalStorage.ts\");\nclass AuthenticationService {\n    /**\n     *\n     * ### **Login::login_challenge (v1)**\n     *\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postAuthenticationServiceRcmsApi1AuthLogin(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({}).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/auth/login`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Login::logout (v1)**\n     *\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postAuthenticationServiceRcmsApi1AuthLogout(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/auth/logout`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Login::token (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **use_refresh_token** `true`\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postAuthenticationServiceRcmsApi1AuthToken(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({}).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/auth/token`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Login::reminder (v1)**\n     *\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postAuthenticationServiceRcmsApi1MePwReminder(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/me/pw/reminder`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Login::reset_password (v1)**\n     *\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postAuthenticationServiceRcmsApi1MePwReset(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/me/pw/reset`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Login::profile (v1)**\n     *\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static getAuthenticationServiceRcmsApi1MeProfile(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/me/profile`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Login::firebaseToken (v1)**\n     *\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postAuthenticationServiceRcmsApi1FirebaseToken(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/firebase_token`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n}\nexports.AuthenticationService = AuthenticationService;\n(function (AuthenticationService) {\n    ;\n    ;\n    ;\n    ;\n    ;\n    ;\n    ;\n})(AuthenticationService = exports.AuthenticationService || (exports.AuthenticationService = {}));\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/services/AuthenticationService.ts?");

/***/ }),

/***/ "../.tmp/services/CommentsService.ts":
/*!*******************************************!*\
  !*** ../.tmp/services/CommentsService.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ApiError_1 = __webpack_require__(/*! ../core/ApiError */ \"../.tmp/core/ApiError.ts\");\nconst request_1 = __webpack_require__(/*! ../core/request */ \"../.tmp/core/request.ts\");\nconst OpenAPI_1 = __webpack_require__(/*! ../core/OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\nconst LocalStorage_1 = __webpack_require__(/*! ../core/LocalStorage */ \"../.tmp/core/LocalStorage.ts\");\nclass CommentsService {\n    /**\n     *\n     * ### **Comment::list (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **module_type** `topics`\n     *\n     * @param moduleId モジュールID\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param newOrderFlg To the display the newest use 1. Default: 0\n     * @param cnt Display number per page\n     * @param pageId Page ID\n     * @param fromDate Posted Date\n     * @param toDate Posted Date\n     * @param groupBy Grouping List by (module_id)\n     * @param groupAs Grouping List as (array or object)\n     * @result any\n     * @throws ApiError\n     */\n    static getCommentsServiceRcmsApi1TopicsComments(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/topics/comments`,\n                    query: {\n                        'module_id[]': requestParam.moduleId,\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                        'new_order_flg': requestParam.newOrderFlg,\n                        'cnt': requestParam.cnt,\n                        'pageID': requestParam.pageId,\n                        'from_date': requestParam.fromDate,\n                        'to_date': requestParam.toDate,\n                        'groupBy': requestParam.groupBy,\n                        'groupAs': requestParam.groupAs,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Comment::insert (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **use_module_type** `topics`\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postCommentsServiceRcmsApi1TopicsCommentsInsert(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/topics/comments/insert`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Comment::update (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **use_module_type** `topics`\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postCommentsServiceRcmsApi1TopicsCommentsUpdate(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/topics/comments/update`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Comment::delete (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **use_module_type** `topics`\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postCommentsServiceRcmsApi1TopicsCommentsDelete(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/topics/comments/delete`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n}\nexports.CommentsService = CommentsService;\n(function (CommentsService) {\n    ;\n    ;\n    ;\n    ;\n})(CommentsService = exports.CommentsService || (exports.CommentsService = {}));\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/services/CommentsService.ts?");

/***/ }),

/***/ "../.tmp/services/FavoritesService.ts":
/*!********************************************!*\
  !*** ../.tmp/services/FavoritesService.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ApiError_1 = __webpack_require__(/*! ../core/ApiError */ \"../.tmp/core/ApiError.ts\");\nconst request_1 = __webpack_require__(/*! ../core/request */ \"../.tmp/core/request.ts\");\nconst OpenAPI_1 = __webpack_require__(/*! ../core/OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\nconst LocalStorage_1 = __webpack_require__(/*! ../core/LocalStorage */ \"../.tmp/core/LocalStorage.ts\");\nclass FavoritesService {\n    /**\n     *\n     * ### **Favorite::list (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **module_type** `topics`\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param cnt Display number per page\n     * @param pageId Page ID\n     * @param moduleId\n     * @param memberId Member ID\n     * @param rcmsid rcmsid\n     * @param groupBy Grouping List by (module_id)\n     * @param groupAs Grouping List as (array or object)\n     * @result any\n     * @throws ApiError\n     */\n    static getFavoritesServiceRcmsApi1Favorites(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/favorites`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                        'cnt': requestParam.cnt,\n                        'pageID': requestParam.pageId,\n                        'module_id[]': requestParam.moduleId,\n                        'member_id[]': requestParam.memberId,\n                        'rcmsid[]': requestParam.rcmsid,\n                        'groupBy': requestParam.groupBy,\n                        'groupAs': requestParam.groupAs,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Favorite::insert (v1)**\n     *\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postFavoritesServiceRcmsApi1FavoritesInsert(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/favorites/insert`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Favorite::delete (v1)**\n     *\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postFavoritesServiceRcmsApi1FavoritesDelete(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/favorites/delete`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n}\nexports.FavoritesService = FavoritesService;\n(function (FavoritesService) {\n    ;\n    ;\n    ;\n})(FavoritesService = exports.FavoritesService || (exports.FavoritesService = {}));\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/services/FavoritesService.ts?");

/***/ }),

/***/ "../.tmp/services/FilesService.ts":
/*!****************************************!*\
  !*** ../.tmp/services/FilesService.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ApiError_1 = __webpack_require__(/*! ../core/ApiError */ \"../.tmp/core/ApiError.ts\");\nconst request_1 = __webpack_require__(/*! ../core/request */ \"../.tmp/core/request.ts\");\nconst OpenAPI_1 = __webpack_require__(/*! ../core/OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\nconst LocalStorage_1 = __webpack_require__(/*! ../core/LocalStorage */ \"../.tmp/core/LocalStorage.ts\");\nclass FilesService {\n    /**\n     *\n     * ### **Files::upload (v1)**\n     *\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param requestBody\n     * @result any\n     * @throws ApiError\n     */\n    static postFilesServiceRcmsApi1FilesUpload(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/files/upload`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n}\nexports.FilesService = FilesService;\n(function (FilesService) {\n    ;\n})(FilesService = exports.FilesService || (exports.FilesService = {}));\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/services/FilesService.ts?");

/***/ }),

/***/ "../.tmp/services/InquiriesService.ts":
/*!********************************************!*\
  !*** ../.tmp/services/InquiriesService.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ApiError_1 = __webpack_require__(/*! ../core/ApiError */ \"../.tmp/core/ApiError.ts\");\nconst request_1 = __webpack_require__(/*! ../core/request */ \"../.tmp/core/request.ts\");\nconst OpenAPI_1 = __webpack_require__(/*! ../core/OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\nconst LocalStorage_1 = __webpack_require__(/*! ../core/LocalStorage */ \"../.tmp/core/LocalStorage.ts\");\nclass InquiriesService {\n    /**\n     * null\n     *\n     * ### **InquiryForm::list (v1)**\n     *\n     * null\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static getInquiriesServiceRcmsApi1InquiryForms(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/inquiry/forms`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     * null\n     *\n     * ### **InquiryForm::details (v1)**\n     *\n     * null\n     * @param inquiryId\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static getInquiriesServiceRcmsApi1InquiryFormsInquiryId(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/inquiry/forms/${requestParam.inquiryId}`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **InquiryMessage::list (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **id** `1`\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param order Set the sort order. Available param {0}\n     * @result any\n     * @throws ApiError\n     */\n    static getInquiriesServiceRcmsApi1Inquiry1Messages(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/inquiry1/messages`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                        'order': requestParam.order,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **InquiryMessage::send (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **id** `1`\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postInquiriesServiceRcmsApi1Inquiry1MessagesSend(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/inquiry1/messages/send`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **InquiryMessage::update (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **id** `1`\n     *\n     * @param inquiryBnId Message ID\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postInquiriesServiceRcmsApi1Inquiry1MessagesUpdate(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/inquiry1/messages/update`,\n                    query: {\n                        'inquiry_bn_id': requestParam.inquiryBnId,\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n}\nexports.InquiriesService = InquiriesService;\n(function (InquiriesService) {\n    ;\n    ;\n    ;\n    ;\n    ;\n})(InquiriesService = exports.InquiriesService || (exports.InquiriesService = {}));\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/services/InquiriesService.ts?");

/***/ }),

/***/ "../.tmp/services/MembersService.ts":
/*!******************************************!*\
  !*** ../.tmp/services/MembersService.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ApiError_1 = __webpack_require__(/*! ../core/ApiError */ \"../.tmp/core/ApiError.ts\");\nconst request_1 = __webpack_require__(/*! ../core/request */ \"../.tmp/core/request.ts\");\nconst OpenAPI_1 = __webpack_require__(/*! ../core/OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\nconst LocalStorage_1 = __webpack_require__(/*! ../core/LocalStorage */ \"../.tmp/core/LocalStorage.ts\");\nclass MembersService {\n    /**\n     *\n     * ### **Member::list (v1)**\n     *\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param id Member ID\n     * @param cnt Number of topics per page\n     * @param pageId Page ID\n     * @param sName Member search\n     * @param sEmail Member search\n     * @param sTel Member search\n     * @param sAddress Member search\n     * @param sTdfkCd Member search\n     * @param groupId Member search\n     * @result any\n     * @throws ApiError\n     */\n    static getMembersServiceRcmsApi1Members(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/members`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                        'id[]': requestParam.id,\n                        'cnt': requestParam.cnt,\n                        'pageID': requestParam.pageId,\n                        's_name': requestParam.sName,\n                        's_email': requestParam.sEmail,\n                        's_tel': requestParam.sTel,\n                        's_address': requestParam.sAddress,\n                        's_tdfk_cd': requestParam.sTdfkCd,\n                        'group_id': requestParam.groupId,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Member::details (v1)**\n     *\n     *\n     * @param memberId\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static getMembersServiceRcmsApi1MembersMemberId(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/members/${requestParam.memberId}`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Member::insert (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **default_group_id** `1`\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postMembersServiceRcmsApi1MembersInsert(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/members/insert`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Member::update (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **allowed_group_ids** `1`\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postMembersServiceRcmsApi1MembersUpdate(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/members/update`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Member::delete (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **allowed_group_ids** `1`\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postMembersServiceRcmsApi1MembersDelete(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/members/delete`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Member::update (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **self_only** `true`\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postMembersServiceRcmsApi1MeUpdate(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/me/update`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Member::delete (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **self_only** `true`\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postMembersServiceRcmsApi1MeDelete(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/me/delete`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n}\nexports.MembersService = MembersService;\n(function (MembersService) {\n    ;\n    ;\n    ;\n    ;\n    ;\n    ;\n    ;\n})(MembersService = exports.MembersService || (exports.MembersService = {}));\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/services/MembersService.ts?");

/***/ }),

/***/ "../.tmp/services/TablesService.ts":
/*!*****************************************!*\
  !*** ../.tmp/services/TablesService.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ApiError_1 = __webpack_require__(/*! ../core/ApiError */ \"../.tmp/core/ApiError.ts\");\nconst request_1 = __webpack_require__(/*! ../core/request */ \"../.tmp/core/request.ts\");\nconst OpenAPI_1 = __webpack_require__(/*! ../core/OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\nconst LocalStorage_1 = __webpack_require__(/*! ../core/LocalStorage */ \"../.tmp/core/LocalStorage.ts\");\nclass TablesService {\n    /**\n     *\n     * ### **Master::list (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **csvtable_id** `1`\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param keyIdx Key index (0|1|2|3|4)\n     * @param valueIdx Value index (0|1|2|3|4)\n     * @param multiple Multiple(0|1)\n     * @param outputAs Output List As (array|object)\n     * @param groupBy Grouping List By (id|parentValue|parentLabel|childValue|childLabel)\n     * @param groupAs Grouping List As (array|object)\n     * @result any\n     * @throws ApiError\n     */\n    static getTablesServiceRcmsApi1TablesSimple(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/tables/simple`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                        'key_idx[]': requestParam.keyIdx,\n                        'value_idx[]': requestParam.valueIdx,\n                        'multiple': requestParam.multiple,\n                        'outputAs': requestParam.outputAs,\n                        'groupBy': requestParam.groupBy,\n                        'groupAs': requestParam.groupAs,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Master::list (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **csvtable_id** `2`\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param keyIdx Key index (0|1)\n     * @param valueIdx Value index (0|1)\n     * @param multiple Multiple(0|1)\n     * @param outputAs Output List As (array|object)\n     * @result any\n     * @throws ApiError\n     */\n    static getTablesServiceRcmsApi1TablesMatrix(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/tables/matrix`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                        'key_idx[]': requestParam.keyIdx,\n                        'value_idx[]': requestParam.valueIdx,\n                        'multiple': requestParam.multiple,\n                        'outputAs': requestParam.outputAs,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Master::list (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **csvtable_id** `3`\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param keyIdx Key index (0|1)\n     * @param valueIdx Value index (0|1)\n     * @param multiple Multiple(0|1)\n     * @param outputAs Output List As (array|object)\n     * @result any\n     * @throws ApiError\n     */\n    static getTablesServiceRcmsApi1TablesDate(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/tables/date`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                        'key_idx[]': requestParam.keyIdx,\n                        'value_idx[]': requestParam.valueIdx,\n                        'multiple': requestParam.multiple,\n                        'outputAs': requestParam.outputAs,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Master::list (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **csvtable_id** `4`\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param keyIdx Key index (0|1|2|3|4)\n     * @param valueIdx Value index (0|1|2|3|4)\n     * @param multiple Multiple(0|1)\n     * @param outputAs Output List As (array|object)\n     * @result any\n     * @throws ApiError\n     */\n    static getTablesServiceRcmsApi1TablesChecksheet(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/tables/checksheet`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                        'key_idx[]': requestParam.keyIdx,\n                        'value_idx[]': requestParam.valueIdx,\n                        'multiple': requestParam.multiple,\n                        'outputAs': requestParam.outputAs,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Master::list (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **csvtable_id** `5`\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param keyIdx Key index\n     * @param valueIdx Value index\n     * @param multiple Multiple(0|1)\n     * @param outputAs Output List As (array|object)\n     * @result any\n     * @throws ApiError\n     */\n    static getTablesServiceRcmsApi1TablesInvalid(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/tables/invalid`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                        'key_idx[]': requestParam.keyIdx,\n                        'value_idx[]': requestParam.valueIdx,\n                        'multiple': requestParam.multiple,\n                        'outputAs': requestParam.outputAs,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Master::list (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **csvtable_id** `1`\n     *\n     * > **key_idx** `1`\n     *\n     * > **value_idx** `2`\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param multiple Multiple(0|1)\n     * @param outputAs Output List As (array|object)\n     * @param groupBy Grouping List By (id|parentValue|parentLabel|childValue|childLabel)\n     * @param groupAs Grouping List As (array|object)\n     * @result any\n     * @throws ApiError\n     */\n    static getTablesServiceRcmsApi1TablesSimpleKey1Value2(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/tables/simple/key1-value2`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                        'multiple': requestParam.multiple,\n                        'outputAs': requestParam.outputAs,\n                        'groupBy': requestParam.groupBy,\n                        'groupAs': requestParam.groupAs,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n}\nexports.TablesService = TablesService;\n(function (TablesService) {\n    ;\n    ;\n    ;\n    ;\n    ;\n    ;\n})(TablesService = exports.TablesService || (exports.TablesService = {}));\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/services/TablesService.ts?");

/***/ }),

/***/ "../.tmp/services/TagsService.ts":
/*!***************************************!*\
  !*** ../.tmp/services/TagsService.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ApiError_1 = __webpack_require__(/*! ../core/ApiError */ \"../.tmp/core/ApiError.ts\");\nconst request_1 = __webpack_require__(/*! ../core/request */ \"../.tmp/core/request.ts\");\nconst OpenAPI_1 = __webpack_require__(/*! ../core/OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\nconst LocalStorage_1 = __webpack_require__(/*! ../core/LocalStorage */ \"../.tmp/core/LocalStorage.ts\");\nclass TagsService {\n    /**\n     *\n     * ### **Tag::list (v1)**\n     *\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param order Set the sort order. Available param {0}\n     * @param pageId Page ID\n     * @param id Tag IDs that you would like to display\n     * @param categoryId ID of the tag category to be displayed. (Default: All)\n     * @param groupBy Grouping List by (module_id / category)\n     * @param groupAs Grouping List as (array or object)\n     * @result any\n     * @throws ApiError\n     */\n    static getTagsServiceRcmsApi1Tags(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/tags`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                        'order[]': requestParam.order,\n                        'pageID': requestParam.pageId,\n                        'id[]': requestParam.id,\n                        'category_id[]': requestParam.categoryId,\n                        'groupBy': requestParam.groupBy,\n                        'groupAs': requestParam.groupAs,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Tag::insert (v1)**\n     *\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postTagsServiceRcmsApi1TagsInsert(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/tags/insert`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Tag::delete (v1)**\n     *\n     *\n     * @param tagId\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postTagsServiceRcmsApi1TagsDeleteTagId(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/tags/delete/${requestParam.tagId}`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n}\nexports.TagsService = TagsService;\n(function (TagsService) {\n    ;\n    ;\n    ;\n})(TagsService = exports.TagsService || (exports.TagsService = {}));\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/services/TagsService.ts?");

/***/ }),

/***/ "../.tmp/services/TopicsService.ts":
/*!*****************************************!*\
  !*** ../.tmp/services/TopicsService.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ApiError_1 = __webpack_require__(/*! ../core/ApiError */ \"../.tmp/core/ApiError.ts\");\nconst request_1 = __webpack_require__(/*! ../core/request */ \"../.tmp/core/request.ts\");\nconst OpenAPI_1 = __webpack_require__(/*! ../core/OpenAPI */ \"../.tmp/core/OpenAPI.ts\");\nconst LocalStorage_1 = __webpack_require__(/*! ../core/LocalStorage */ \"../.tmp/core/LocalStorage.ts\");\nclass TopicsService {\n    /**\n     *\n     * ### **Topics::details (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **topics_group_id** `1`\n     *\n     * @param topicsId\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static getTopicsServiceRcmsApi1Topics1TopicsId(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/topics1/${requestParam.topicsId}`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Topics::list (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **topics_group_id** `1`\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param cnt Number of topics per page\n     * @param pageId Page ID\n     * @param customSearchId search contdition\n     * @param topicsKeyword Keyword\n     * @param topicsKeywordCond Change the way of narrowing down by keyword (Default: AND)\n     * @param contentsType The ID from the displayed category. All data will be displayed when this is not set.\n     * @param contentsTypeCond Change the way of narrowing down by category ID (Default: OR)\n     * @param date Date\n     * @param usingSeason Use season (Yes: 1 | No: 0)\n     * @param season Season\n     * @param extColumnCond ext_column condition type (Default:OR)<br>\n     * To specify an ext_col number set: 'ext_column_{no}_cond'\n     * @param excludeTopicsId IDs of the excluded topics\n     * @param tagCategoryId ID of the tag category to be displayed. (Default: All)\n     * @param tagSearch narrowed by the value of the tag id.  yes:1 no:0\n     * @param tagId Tag IDs that you would like to display\n     * @param tagCond Change the way to narrow down tags (Default: OR)\n     * @param excludeTagId Tag IDs that you would like to hide\n     * @param myFavoriteList\n     * @param myCommentList\n     * @param myOwnList\n     * @param order Set the sort order. Available param {0}\n     * @param orderById\n     * @param id IDs of the displayed topics\n     * @result any\n     * @throws ApiError\n     */\n    static getTopicsServiceRcmsApi1Topics1(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/topics1`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                        'cnt': requestParam.cnt,\n                        'pageID': requestParam.pageId,\n                        'custom_search_id': requestParam.customSearchId,\n                        'topics_keyword': requestParam.topicsKeyword,\n                        'topics_keyword_cond': requestParam.topicsKeywordCond,\n                        'contents_type[]': requestParam.contentsType,\n                        'contents_type_cond': requestParam.contentsTypeCond,\n                        'date': requestParam.date,\n                        'using_season': requestParam.usingSeason,\n                        'season': requestParam.season,\n                        'ext_column_cond': requestParam.extColumnCond,\n                        'exclude_topics_id': requestParam.excludeTopicsId,\n                        'tag_category_id': requestParam.tagCategoryId,\n                        'tag_search': requestParam.tagSearch,\n                        'tag_id[]': requestParam.tagId,\n                        'tag_cond': requestParam.tagCond,\n                        'exclude_tag_id': requestParam.excludeTagId,\n                        'my_favorite_list': requestParam.myFavoriteList,\n                        'my_comment_list': requestParam.myCommentList,\n                        'my_own_list': requestParam.myOwnList,\n                        'order': requestParam.order,\n                        'order_by_id': requestParam.orderById,\n                        'id[]': requestParam.id,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Topics::insert (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **topics_group_id** `1`\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postTopicsServiceRcmsApi1Topics1Insert(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/topics1/insert`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Topics::update (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **topics_group_id** `1`\n     *\n     * @param topicsId\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postTopicsServiceRcmsApi1Topics1UpdateTopicsId(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/topics1/update/${requestParam.topicsId}`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Topics::delete (v1)**\n     *\n     *\n     * @param topicsId\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postTopicsServiceRcmsApi1Topics1DeleteTopicsId(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/topics1/delete/${requestParam.topicsId}`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Topics::list (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **topics_group_id** `2`\n     *\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @param cnt Number of topics per page\n     * @param pageId Page ID\n     * @param customSearchId search contdition\n     * @param topicsKeyword Keyword\n     * @param topicsKeywordCond Change the way of narrowing down by keyword (Default: AND)\n     * @param contentsType The ID from the displayed category. All data will be displayed when this is not set.\n     * @param contentsTypeCond Change the way of narrowing down by category ID (Default: OR)\n     * @param date Date\n     * @param usingSeason Use season (Yes: 1 | No: 0)\n     * @param season Season\n     * @param extColumnCond ext_column condition type (Default:OR)<br>\n     * To specify an ext_col number set: 'ext_column_{no}_cond'\n     * @param excludeTopicsId IDs of the excluded topics\n     * @param tagCategoryId ID of the tag category to be displayed. (Default: All)\n     * @param tagSearch narrowed by the value of the tag id.  yes:1 no:0\n     * @param tagId Tag IDs that you would like to display\n     * @param tagCond Change the way to narrow down tags (Default: OR)\n     * @param excludeTagId Tag IDs that you would like to hide\n     * @param myFavoriteList\n     * @param myCommentList\n     * @param myOwnList\n     * @param order Set the sort order. Available param {0}\n     * @param orderById\n     * @param id IDs of the displayed topics\n     * @result any\n     * @throws ApiError\n     */\n    static getTopicsServiceRcmsApi1TopicsMultiple(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/topics/multiple`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                        'cnt': requestParam.cnt,\n                        'pageID': requestParam.pageId,\n                        'custom_search_id': requestParam.customSearchId,\n                        'topics_keyword': requestParam.topicsKeyword,\n                        'topics_keyword_cond': requestParam.topicsKeywordCond,\n                        'contents_type[]': requestParam.contentsType,\n                        'contents_type_cond': requestParam.contentsTypeCond,\n                        'date': requestParam.date,\n                        'using_season': requestParam.usingSeason,\n                        'season': requestParam.season,\n                        'ext_column_cond': requestParam.extColumnCond,\n                        'exclude_topics_id': requestParam.excludeTopicsId,\n                        'tag_category_id': requestParam.tagCategoryId,\n                        'tag_search': requestParam.tagSearch,\n                        'tag_id[]': requestParam.tagId,\n                        'tag_cond': requestParam.tagCond,\n                        'exclude_tag_id': requestParam.excludeTagId,\n                        'my_favorite_list': requestParam.myFavoriteList,\n                        'my_comment_list': requestParam.myCommentList,\n                        'my_own_list': requestParam.myOwnList,\n                        'order': requestParam.order,\n                        'order_by_id': requestParam.orderById,\n                        'id[]': requestParam.id,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Topics::details (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **topics_group_id** `2`\n     *\n     * @param topicsId\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static getTopicsServiceRcmsApi1TopicsMultipleTopicsId(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'get',\n                    path: `/rcms-api/1/topics/multiple/${requestParam.topicsId}`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Topics::insert (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **topics_group_id** `2`\n     *\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postTopicsServiceRcmsApi1TopicsMultipleInsert(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/topics/multiple/insert`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n    /**\n     *\n     * ### **Topics::update (v1)**\n     *\n     *\n     * ## Controller parameters\n     *\n     * > **topics_group_id** `2`\n     *\n     * @param topicsId\n     * @param requestBody\n     * @param outputFormat Format (json|xml|csv)\n     * @param lang Language\n     * @param charset Charset\n     * @result any\n     * @throws ApiError\n     */\n    static postTopicsServiceRcmsApi1TopicsMultipleUpdateTopicsId(requestParam) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldHookToken = Object.keys({\n                'Token-Auth': OpenAPI_1.OpenAPI.SECURITY['Token-Auth'],\n            }).length > 0;\n            const request = () => __awaiter(this, void 0, void 0, function* () {\n                return yield request_1.request({\n                    headers: shouldHookToken ? { [OpenAPI_1.OpenAPI.SECURITY['Token-Auth'].name]: `${LocalStorage_1.LocalStorage.getAccessToken()}` } : {},\n                    method: 'post',\n                    path: `/rcms-api/1/topics/multiple/update/${requestParam.topicsId}`,\n                    query: {\n                        '_output_format': requestParam.outputFormat,\n                        '_lang': requestParam.lang,\n                        '_charset': requestParam.charset,\n                    },\n                    body: requestParam.requestBody,\n                });\n            });\n            let result = yield request();\n            if (shouldHookToken && !result.ok && result.status === 401) {\n                result = yield Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../core/Auth */ \"../.tmp/core/Auth.ts\"))).then(({ Auth }) => Auth.retryRequest(request, result));\n            }\n            ApiError_1.catchGenericError(result);\n            return result.body;\n        });\n    }\n}\nexports.TopicsService = TopicsService;\n(function (TopicsService) {\n    ;\n    ;\n    ;\n    ;\n    ;\n    ;\n    ;\n    ;\n    ;\n})(TopicsService = exports.TopicsService || (exports.TopicsService = {}));\n\n\n//# sourceURL=webpack://Kuroco/../.tmp/services/TopicsService.ts?");

/***/ })

/******/ });